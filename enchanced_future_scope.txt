reference files: in branch varad/enchance-spot
santizied_aws_accounts_config.json
ec2-region-ami-mapping.json
create-ec2-instance-configure.py
create_iam_users_logging.py
eks_new_version_cluster.py
spot_instance_scrapper.py
userdata_allsupport.sh for launch template

no aws_accounts_config.json is actual file nut i has creds so i created santizied version of it for pushing it eepo.. u still refeer to original file aws_accounts_config.json 

✅ PART 1: EC2 + ASG Automation (Root & IAM Supported)
A. Credential Selection Flow (Shared Across EC2 & EKS)
Prompt user:

“Do you want to use Root or IAM credentials?”

If Root:

Ask to select account name from aws_accounts_config.json.

Then ask to select region from user_regions array in the selected account.

If IAM:

Use existing user-based flow (unchanged).

B. EC2 Instance Creation
Use selected credentials (root/iam) and region.

Launch EC2 instance using user selection.

Apply default instance type if not specified: t3.micro, c6a.large, c6i.large, t3.medium, t3a.medium (or pull from allowed_instance_types in config).

Optional: Attach a predefined launch template with userdata_allsupport.

C. Auto Scaling Group (ASG) for EC2
Automatically attach an ASG for each EC2 instance:

Purpose: Ensure EC2 re-creates if terminated.

Hardcode ASG to use userdata_allsupport.

Support ASG strategies:

On-Demand Only: Analyze live service quota, let user choose instance types multiple options.

Spot Only: Use spot_instance_scraper, do quota & interruption analysis. let user choose instance types multiple options.

Cache service quota and interruption rate analysis results per region + instance type in a local JSON file 

Before running a fresh analysis, check if the data exists and is not older than 24 hours; reuse cached values to improve performance.

Provide a --force-refresh flag or prompt to bypass the cache and fetch fresh data from AWS APIs.

Mixed Strategy (50/50 default):

Prompt for instance types for each (spot and ondemand).

Perform analysis and scoring:

Score = Spot availability + Quota availability + Low interruption.

Sort and show options with scores.

Allow user to review JSON summary before selection.

D. Scheduled ASG (Optional)
Feature to schedule ASG for EC2 to run only during specific hours (e.g. 9 AM to 6 PM IST).

Schedule to be attached via cron or event rule-based ASG lifecycle policy.

. Instance Family Movement
Move allowed_instance_types and related instance families to:

File: ec2-ami-region-mapping.json

Key: under respective region or global key

Access this file during:

EC2 instance launch

Spot recommendation logic

Instance Family Movement
Move allowed_instance_types and related instance families to:

File: ec2-ami-region-mapping.json

Key: under respective region or global key

Access this file during:

EC2 instance launch

EKS nodegroup creation

Spot recommendation logic

use userdata_allsupport.sh

logging can be minimal level but make sure reuired info logged and all the output once resource created has to be saved under a folder aws/ec2/* 

you can reuse method from existing python file as well in that you dont have to print whole method again, you can put a placeholder and then ask me to copy paste. so you can reduce the code typing. eg: load_userdata_script() enchance_userdata() etc methods for example.

basically all changes in the reference file are included. you dont have to print all in one file. u can provide multiple classes in same directory. you can ask for next prompt whenever you feel u printed too many content. 

write code in such a way that methods to be reused like spot analysis auto scaling etc across ec2 in phase-2 eks 

after finishing coding in the final description list me which class and which method you creaed placeholder and from which class which existing method i should copy paste.

-----------------------------------------------------------
reference files: in branch varad/enchance-spot
aws_accounts_config.json
ec2-region-ami-mapping.json
create-ec2-instance-configure.py
create_iam_users_logging.py
eks_new_version_cluster.py
spot_instance_scrapper.py
userdata_allsupport.sh

✅ PART 2: EKS Cluster & Nodegroup Automation (Root & IAM Supported)
A. EKS Cluster Creation
Use same root/iam credential selection flow.

Fetch default EKS version from ec2-ami-region-mapping.json → eks_config.default_version.

Fallback to 1.27 if not found.

Fetch amiType from eks_config.ami_type in the same file.

B. EKS Nodegroup Setup
Allow setup of:

ng-ondemand: 1 node

ng-spot: 2 nodes (default) or user-defined let user choose instance types multiple options.

Support ASG strategy for nodegroup:

On-demand, Spot, or Mixed (50/50 default) let user choose instance types multiple options.

Spot Instance Analysis (same logic as EC2):

Use spot_instance_scraper file for doing anaylsis let user choose instance types multiple options.

Run service quota and interruption rate analysis

Cache service quota and interruption rate analysis results per region + instance type in a local JSON file 

Before running a fresh analysis, check if the data exists and is not older than 24 hours; reuse cached values to improve performance.

Provide a --force-refresh flag or prompt to bypass the cache and fetch fresh data from AWS APIs.

Save analysis as JSON. 

Let user review and choose instances based on availability

If user skips analysis, allow raw selection

Allow multiple instance types selection for each strategy.

Use ec2-ami-region-mapping.json → eks_config object

Keys:

default_version (fallback to 1.27)

ami_type

logging can be minimal level but make sure reuired info logged and all the output once resource created has to be saved under a folder aws/eks/* 

write code in such a way that methods to be reused like spot analysis auto scaling etc across ec2 and phase-1 ec2 

you can reuse method from existing python file as well in that you dont have to print whole method again, you can put a placeholder and then ask me to copy paste. so you can reduce the code typing. eg: eks verification method, create cluster method etc. 

make sure all verification and aws auth and configmap and autoscaler scheduler and cloudwatch, basically all changes in the reference file are included. you dont have to print all in one file. u can provide multiple classes in same directory. you can ask for next prompt whenever you feel u printed too many content. 

after finishing coding in the final description list me which class and which method you creaed placeholder and from which class which existing method i should copy paste.
-----------------------------------------------------------------

reference files: in branch varad/enchance-spot
aws_accounts_config.json
ec2-region-ami-mapping.json
create-ec2-instance-configure.py
create_iam_users_logging.py
eks_new_version_cluster.py
spot_instance_scrapper.py
userdata_allsupport.sh

no aws_accounts_config.json is actual file nut i has creds so i created santizied version of it for pushing it eepo.. u still refeer to original file aws_accounts_config.json 

no aws_accounts_config.json is actual file nut i has creds so i created santizied version of it for pushing it eepo.. u still refeer to original file aws_accounts_config.json 

PART 3: Ultra IAM Cleanup
A. IAM Cleanup Automation
Iterate over all accounts listed in aws_accounts_config.json.

For each account:

Remove all IAM users and Groups.
Remove unnecessary/unattached IAM roles, instance profiles, and policies.

Clear:

Orphaned inline policies

Detached managed policies

Empty IAM groups (optional prompt)

Ensure safe deletion:

Add a dry-run mode (preview deletions before execution).

Optionally log a backup of deleted IAM resource metadata.

Must support both root and IAM credential execution mode.

. Group Naming Convention
account01_cloudusergroup, account02_cloudusergroup, etc.

B. Automation Steps
For each account in aws_accounts_config.json:

Check if group exists, create if not.

For each IAM user:

Detach AdminAccess if attached directly.

Attach to the group corresponding to the account.

Attach policies (like AdministratorAccess) to the group instead of directly to the user.

Optional:

Backup existing user policy state before migration

logging can be minimal level but make sure reuired info logged and all the output once resource created has to be saved under a folder aws/iam/* 

write code in such a way that methods to be reused. 

-------------------------------------------------------------------
reference files: in branch varad/enchance-spot
aws_accounts_config.json
ec2-region-ami-mapping.json
create-ec2-instance-configure.py
create_iam_users_logging.py
eks_new_version_cluster.py
spot_instance_scrapper.py
userdata_allsupport.sh


after finishing coding in the final description list me which class and which method you creaed placeholder and from which class which existing method i should copy paste.

✅ PART 4: Live Cost Calculator & Health Metadata (EC2 + EKS)
A. Input Flow
Prompt for:

Account ID

Region(s)

Service scope:

All EC2 / Selected EC2

All EKS / Selected EKS

B. EC2 Cost Calculation
Pull:

Instance type

Uptime (from launch time)

Pricing (via AWS Pricing API)

Compute:

Live cost = hours × hourly rate (for each running EC2)

Round to 2 decimals, ensure non-zero values

Add health metadata (e.g., CPU status, instance reachability).

logging can be minimal level but make sure reuired info logged and all the output once resource created has to be saved under a folder aws/ec2/live-host/* 

C. EKS Cost Calculation
Pull:

EKS cluster metadata

Nodegroup info (instance types, counts)

Uptime & pricing per node

Compute:

Live cost for:

EKS control plane (if applicable)

Worker nodes (based on type & hours)

Return JSON summary + CLI/console output:

cluster_name, node_type, hourly_price, running_hours, estimated_cost

logging can be minimal level but make sure reuired info logged and all the output once resource created has to be saved under a folder aws/eks/live-host/* 

